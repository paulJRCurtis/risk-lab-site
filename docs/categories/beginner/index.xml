<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Beginner on Risk &amp; Compliance Labs</title><link>http://paulJRCurtis.github.io/risk-lab-site/categories/beginner/</link><description>Recent content in Beginner on Risk &amp; Compliance Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Aug 2020 15:17:40 +1000</lastBuildDate><atom:link href="http://paulJRCurtis.github.io/risk-lab-site/categories/beginner/index.xml" rel="self" type="application/rss+xml"/><item><title>Determine the current OS versions</title><link>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/1-current-os/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/1-current-os/</guid><description>In this step we will use AWS Systems Manager - Inventory to determine the operating systems versions how many instances are running each operating systems.
1. Go to AWS Systems Manager - Inventory Select Systems Manager from the AWS Console.
In the navigation pane, choose Inventory.
If you can only see the AWS Systems Manager home page, you may need to click on the menu icon (â˜°) in the top left to open the navigation pane, and then choose Inventory.</description></item><item><title>Start the Workshop</title><link>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/</link><pubDate>Fri, 07 Aug 2020 07:41:43 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/</guid><description>To start the workshop, follow one of the following depending on whether you are;
running the workshop on your own (in your own account),
or
attending an AWS hosted event (using AWS provided hashes)</description></item><item><title>Set patch baselines</title><link>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/2-set-patch-baselines/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/2-set-patch-baselines/</guid><description>As well as providing insight into the environment systems manager allows you to actively manage instances including applying patches. Patch Manager has predefined patch baselines for each operating system it supports. You can use these patch baselines to patch your instances, or you can create your own. In this Jam we will use the predefined patch baselines.
The environment provided for this challenge includes two fleets of EC2 Instances, one fleet includes three Amazon Linux 2 instances, the other two instances running a version of Windows.</description></item><item><title>Review compliance</title><link>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/3-review-compliance/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/3-review-compliance/</guid><description>Now that you have set the patching baseline for your two patch groups (jam-windows-app-patch-group and jam-linux-app-patch-group) you have something to compare against. You now need to determine the effectiveness of the current manual patching controls. To do this you will identify the number of non-compliant resources.
1. Run Patch Manager Scan From Patch Manager select Patch Now
Click Patch now
2. Scan Instances Run Patch Manager to Scan only.
You will see the progress tracked on screen, wait for a couple on minutes for the scan to complete.</description></item><item><title>Create a Maintenance Window</title><link>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/4-maintenance-window/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/4-maintenance-window/</guid><description>AWS Systems Manager Maintenance Windows let you define a schedule for when to perform potentially disruptive actions on your instances such as patching an operating system, updating drivers, or installing software or patches. These may require Systems Manager to perform a restart so these actions should be scheduled appropriately.
Create a maintenance window which you will use to patch the Windows and Amazon Linux 2 instances. The details of the maintenance window details such as time, duration, frequency are all up to you.</description></item><item><title>Getting to Know the Console</title><link>http://paulJRCurtis.github.io/risk-lab-site/2-know-the-console/</link><pubDate>Fri, 14 Aug 2020 15:34:54 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/2-know-the-console/</guid><description>Login to your AWS Account If you haven&amp;rsquo;t already, logon to your AWS account. If you don&amp;rsquo;t have an account, go to Start Workshop.
Let&amp;rsquo;s get to know the Management Console
The AWS Management Console is a web application that comprises and refers to a broad collection of service consoles for managing Amazon Web Services. When you first sign in, you see the console home page.
Along the top menubar you will see a few important elements we will use often.</description></item><item><title>Detective Controls with Config</title><link>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/</guid><description>In this workshop we will use three AWS Config and AWS Config Rules to demonstrate how to automate controls, in this case, the controls will check the configuration of an Amazon Simple Storage Service (Amazon S3) bucket. The same approach can be applied to many AWS services.
AWS Config is a service that enables you to assess, audit, and evaluate the configurations of your AWS resources. Config continuously monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded configurations against desired configurations.</description></item><item><title>Patching Controls with Systems Manager</title><link>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/patching-controls-with-ssm/</guid><description>Many organizations struggle to keep up with patching requirements. Sometimes one of the challenges is to get a definitive inventory of the operating systems and software running in the environment.
In this workshop we will explore using AWS Systems Manager to gain visibility of the environment and to automate patching controls.
In a cloud environment there are two different approaches to patching based on whether the architecture includes instances that are immutable or non-immutable.</description></item></channel></rss>