<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Level 100 on Risk &amp; Compliance Labs</title><link>http://paulJRCurtis.github.io/risk-lab-site/categories/level-100/</link><description>Recent content in Level 100 on Risk &amp; Compliance Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Aug 2020 15:17:40 +1000</lastBuildDate><atom:link href="http://paulJRCurtis.github.io/risk-lab-site/categories/level-100/index.xml" rel="self" type="application/rss+xml"/><item><title>Start the Workshop</title><link>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/</link><pubDate>Fri, 07 Aug 2020 07:41:43 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/</guid><description>To start the workshop, follow one of the following depending on whether you are;
running the workshop on your own (in your own account),
or
attending an AWS hosted event (using AWS provided hashes)</description></item><item><title>Getting to Know the Console</title><link>http://paulJRCurtis.github.io/risk-lab-site/2-know-the-console/</link><pubDate>Fri, 14 Aug 2020 15:34:54 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/2-know-the-console/</guid><description>Login to your AWS Account If you haven&amp;rsquo;t already, logon to your AWS account. If you don&amp;rsquo;t have an account, go to Start Workshop.
Let&amp;rsquo;s get to know the Management Console
The AWS Management Console is a web application that comprises and refers to a broad collection of service consoles for managing Amazon Web Services. When you first sign in, you see the console home page.
Along the top menubar you will see a few important elements we will use often.</description></item><item><title>Create an AWS Account</title><link>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/on-your-own/create-an-aws-account/</link><pubDate>Fri, 07 Aug 2020 08:44:13 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/on-your-own/create-an-aws-account/</guid><description>Your account must have the ability to create new IAM roles and scope other IAM permissions.
If you don&amp;rsquo;t already have an AWS account with Administrator access: create one now by clicking here
Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description></item><item><title>AWS Workshop Portal</title><link>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/at-an-aws-event/aws-workshop-portal/</link><pubDate>Fri, 07 Aug 2020 08:08:53 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/at-an-aws-event/aws-workshop-portal/</guid><description>Login to AWS Workshop Portal This workshop creates an AWS account. You will need the Participant Hash provided upon entry, and your email address to track your unique session.
Use Chrome or Firefox to ensure a good experience.
Connect to the portal by clicking the button or browsing to https://dashboard.eventengine.run. The following screen will be displayed.
Enter the provided hash in the text box. The button on the bottom right corner changes to Accept Terms &amp;amp; Login.</description></item><item><title>Running the workshop on your own</title><link>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/on-your-own/</link><pubDate>Fri, 07 Aug 2020 08:00:24 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/1-start-workshop/on-your-own/</guid><description> Only complete this section if you are running the workshop on your own. If you are at an AWS hosted event (such as an Immersion Day, etc), go to At an AWS Event
Contents Create an AWS Account</description></item><item><title>Accessing AWS Compliance Reports</title><link>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/</guid><description>In this lab you will access AWS Artifact and download a compliance report and work through guidance on how to interpret the report.
This lab is a great place to start if you are new to AWS and mixes a bit of hand on with supporting theory.
AWS Artifact is your go-to, central resource for compliance-related information that matters to you. It provides on-demand access to AWS’ security and compliance reports and select online agreements.</description></item><item><title>Detective Controls with Config</title><link>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/</guid><description>In this lab we will use three AWS Config rules to demonstrate how to check the configuration of an Amazon Simple Storage Service (Amazon S3) bucket.
AWS Config is a service that enables you to assess, audit, and evaluate the configurations of your AWS resources. Config continuously monitors and records your AWS resource configurations and allows you to automate the evaluation of recorded configurations against desired configurations.
With Config, you can review changes in configurations and relationships between AWS resources, dive into detailed resource configuration histories, and determine your overall compliance against the configurations specified in your internal guidelines.</description></item><item><title>Access a report</title><link>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/1-access-a-report/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/1-access-a-report/</guid><description>1. Access the AWS Artifact Console From the Console select the Services dropdown and Artifact under Security, Identity, &amp;amp; Compliance.
Click View reports
2. Download the SOC 2 Report In this lab we&amp;rsquo;ll look at the Service Organization Controls (SOC) 2 Report.
As you can see reports available include our Service Organization Control (SOC) reports, ISO, Payment Card Industry (PCI) reports, and certifications from accreditation bodies across geographies and compliance verticals that validate the implementation and operating effectiveness of AWS security controls.</description></item><item><title>Introduction</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/1-introduction/</link><pubDate>Fri, 07 Aug 2020 09:38:17 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/1-introduction/</guid><description>In this course, we will be deploying Amazon S3 Operational Best Practices with remediation actions conformance pack in an AWS Account. This pack contains following AWS Managed Config Rules.
You can click on the AWS Managed Config Rule name to see the Developer Guide for the rule.
S3BucketPublicReadProhibited with Remediation Action
Checks that your Amazon S3 buckets do not allow public read access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).</description></item><item><title>Get Source Files</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/1-get-source-files/</link><pubDate>Mon, 03 Aug 2020 13:02:59 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/1-get-source-files/</guid><description>If you have already downloaded the risk kab source files you can skip this step.
The very first thing we need to do is get the source files we will be using for this lab.
The files we&amp;rsquo;ll be using are available on github Risk-Labs. For this lab we&amp;rsquo;ll be using the files in the pipeline-controls-intro directory, There are five files but you can disregard the README.md file.</description></item><item><title>Interpreting the results</title><link>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/2-interpret-results/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/2-interpret-results/</guid><description>Now that we have the report lets take some time to understand it. First we need to understand what the report covers, the overall conclusion and the detailed results. We&amp;rsquo;ll start with the AWS Shared Responsibility Model and then dive into the specifics of the report.
1. Shared Responsibility Model First we need to consider the report in the context of the Shared Responsibility Model i.e. what is an AWS responsibility and what is a customer responsibility.</description></item><item><title>Enable AWS Config</title><link>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/1-config-setup/</link><pubDate>Fri, 07 Aug 2020 09:39:18 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/1-config-setup/</guid><description>First we need to enable AWS Config and begin tracking of your resources.
1. Login to your AWS Account If you haven&amp;rsquo;t already logon to your AWS account. If you don&amp;rsquo;t yet have an account go to Start the Workshop
2. Access the AWS Config Console Select the Services dropdown on the menu bar at the top left. Select Config under Management &amp;amp; Governance.
If this is your first time using AWS Config</description></item><item><title>Select AWS Config Rules</title><link>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/2-select-rules/</link><pubDate>Fri, 07 Aug 2020 09:39:18 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/2-select-rules/</guid><description>1. Select Config Rules At the time this lab was being created there were 150 AWS Managed Config Rules to choose from but the number is growing.
In this introductory lab we will use three AWS Managed Config Rules that relate to S3. Recall that we created an S3 bucket already as part of the AWS Config setup to provide config a place to store configuration history and configuration snapshots.</description></item><item><title>Setup Prerequisite Resources</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/2-setup-prerequisite-resources/</link><pubDate>Fri, 07 Aug 2020 09:39:01 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/2-setup-prerequisite-resources/</guid><description>We will create prerequisite resources required for “Amazon S3 Operational Best Practices with Remediation Actions” conformance pack. This includes service linked role for Conformance Packs, Remediation action automation assume role and S3 Service Side logging bucket.
1. Download required templates template
The files we&amp;rsquo;ll be using are available on github Risk-Labs. For this lab we&amp;rsquo;ll be using the files in the conformance-packs directory, There are three files but you can disregard the README.</description></item><item><title>Create Repo Bucket</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/2-create-repo-bucket/</link><pubDate>Mon, 03 Aug 2020 13:17:25 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/2-create-repo-bucket/</guid><description>For this lab we are going to use an Amazon S3 bucket as our code repository. S3 provides all the functionality we need and doesn&amp;rsquo;t require us to manage &amp;ldquo;commits&amp;rdquo; that code repositories do, however you could use AWS CodeCommit or Git. Create your own S3 bucket in the desired region and enable versioning on the bucket.
1. Log on to the AWS Console
2. Select the Services dropdown in the top left or search for S3.</description></item><item><title>Optional: Advanced Shared Responsibility</title><link>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/3-optional-shared-responsibility/</link><pubDate>Sun, 23 Aug 2020 15:17:40 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/3-aws-compliance-reports/3-optional-shared-responsibility/</guid><description>AWS groups services into three main categories: infrastructure, container, and abstracted. Each category comes with a slightly different security ownership model based on how customers interact and access the functionality. Customer responsibility is determined by the AWS Cloud services that a customer selects. This determines the amount of configuration work the customer must perform as part of their security responsibilities.
Infrastructure Services: Services such as Amazon Elastic Compute Cloud (Amazon EC2) and Amazon Virtual Private Cloud (Amazon VPC) are categorized as Infrastructure Services and, as such, require the customer to perform the necessary security configuration and management tasks.</description></item><item><title>Enable AWS Config</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/3-enable-aws-config/</link><pubDate>Fri, 07 Aug 2020 09:39:18 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/3-enable-aws-config/</guid><description>We need to enable AWS Config and begin tracking of your resources.
1. Access the AWS Config Console Select the Services dropdown on the menu bar at the top left. Select Config under Management &amp;amp; Governance.
If this is your first time using AWS Config
select Get started.
If you’ve already used AWS Config select Settings**
2. Select Resources to track On the Settings page, under Resource types to record, select Record all resources supported in this region checkbox and check the checkbox for Include global resources.</description></item><item><title>Review Dashboard</title><link>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/3-dashboard/</link><pubDate>Fri, 07 Aug 2020 09:39:18 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/3-dashboard/</guid><description>1. Explore the Dashboard Take a few minutes to explore the information on the Dashboard.
On the right, in the Compliance status window you can see that there are a total of 3 rules - 1 Noncompliant and 2 Compliant, you can also see that there is 1 resource which is noncompliant.
The Noncompliant rules by noncompliant resource count lists noncompliant rules listed by the number of non-compliant resources. In this case there is only one noncompliant rule and a single resource.</description></item><item><title>Create Environments</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/3-create-environments/</link><pubDate>Mon, 03 Aug 2020 09:22:52 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/3-create-environments/</guid><description>In this step we will create two Amazon Virtual Private Clouds (VPCs) to represent our Testing and Development environments. A VPC is the basic building block for a network on AWS.
We could create the VPCs on the AWS console but it is better practice to deploy our pipeline using AWS CloudFormation Page.
1. Open CloudFormation in the AWS Console
Take the time (3:01) to watch the short video describing CloudFormation if you haven&amp;rsquo;t already seen in.</description></item><item><title>Deploy Conformance Pack</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/4-deploy-conformance-pack/</link><pubDate>Fri, 07 Aug 2020 09:39:34 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/4-deploy-conformance-pack/</guid><description>We will deploy the custom conformance pack which is similar to the sample template &amp;ldquo;Operational Best Practices for S3&amp;rdquo; but it includes some remediation.
In a text editor, open the s3-best-practices-with-remediation-pack.yaml that you downloaded in Step 2 - Setup Prerequisite Resources.
You will need to note your account ID can find by clicking on the dropdown beside your account name on the top menubar. Replace “ACCOUNT_ID_PLACEHOLDER” on line 34, 71, 130 and 170 with your Account Id.</description></item><item><title>Remediate</title><link>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/4-remediate/</link><pubDate>Fri, 07 Aug 2020 09:39:18 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/4-remediate/</guid><description>In this step we will remediate the noncompliant Managed Config Rule S3-bucket-server-side-encryption-enabled. For the purposes of this lab we will remediate the S3 Bucket manually from the AWS Console but in a real production environment you would probably want to take advantage of one of the options to automate this remediation.
1. The S3 Console First navigate to the S3 Console. To do select Services on the menu bar at the top of the page and select S3.</description></item><item><title>Create a Pipeline</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/4-create-pipeline/</link><pubDate>Sun, 02 Aug 2020 12:45:03 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/4-create-pipeline/</guid><description>Now lets create the code pipeline. This will allow us to ensure all change into our production environment progress through our test environment and are pass the required checks.
Our code pipeline will be made up of four stages;
Commit Static Code Analysis Test Deployment Production Deployment Like the VPCs, we could create the pipeline on the AWS console but just like everything else on the AWS Platform a code pipeline is defined by code so we will adhere to good practive and and deploy our pipeline using AWS Cloud Formation.</description></item><item><title>View Compliance and Remediation</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/5-view-compliance-and-remediation/</link><pubDate>Fri, 07 Aug 2020 09:39:57 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/5-view-compliance-and-remediation/</guid><description>We will check compliance status for each rule in conformance pack and associated resources
Once conformance pack is deployed, Click on conformance pack name to drill down into details. You can view list of rules and their compliance status. Click on a rule name to see rule details. Expand Resources in Scope section to see resources in scope and their compliance status. If there are any existing non-compliant resources, you can manually remediate them or wait for auto-remediation to kick in.</description></item><item><title>Explore Timelines</title><link>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/5-timelines/</link><pubDate>Fri, 07 Aug 2020 09:39:18 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/4-detective-controls-config/5-timelines/</guid><description>1. Return to Config Select Services on the menu bar at the top of the page and select Config. You can can find Config by either using the search or selecting it from under Management &amp;amp; Governance. 2. Access Resource timelines From the Resource screen click the Resource Timeline in the top right. 3. Review Resource configuration timeline You should now see the Configuration timeline tab of the timeline page for the resource.</description></item><item><title>Corrective controls with Conformance Packs</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/</link><pubDate>Fri, 07 Aug 2020 09:37:25 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/</guid><description>In this builder session, learn how to build a solution that will evaluate your AWS resources for configuration compliance using AWS Config Conformance Packs. You will also learn how to improve your security posture by remediating non-compliant resources using automatic remediation actions.
Requirements: You will need AWS IAM Managed Policy “arn:aws:iam::aws:policy/AdministratorAccess” or equivalent.
Contents Introduction Setup Prerequisite Resources Enable AWS Config Deploy Conformance Pack View Compliance and Remediation Clean-up Learn More</description></item><item><title>Check CloudFormation</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/5-check-cf/</link><pubDate>Sun, 02 Aug 2020 18:05:05 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/5-check-cf/</guid><description>You can now see the two stacks you have created on the left-hand panel.
By default the CloudFormation console will display the Events tab listing all the events which occurred as part of the CloudFormation deployment. When the CloudFormation script has completed you will see CREATE_COMPLETE on the left hand panel.
Switch between the two stacks and explore the other tabs, in particular review the Resources tab to see all the AWS resources created by the CloudFormation template.</description></item><item><title>Clean-up</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/6-clean-up/</link><pubDate>Fri, 07 Aug 2020 09:40:13 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/6-clean-up/</guid><description>It is important to turn off and delete unused resources so that they do not accrue charges.
Go to Config console. Under settings page, Turn off recording. Delete any Conformance Packs you created. Empty the S3 bucket awsconformance-delivery-bucket-{ACCOUNT_ID} Go to CloudFormation console and delete the stack you created - this might take a few minutes. Go to S3 Console and delete any additional S3 buckets you created.</description></item><item><title>Review Code Pipeline</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/6-review-pipeline/</link><pubDate>Sun, 02 Aug 2020 18:05:32 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/6-review-pipeline/</guid><description>Go to Services and select CodePipeline under Developer Tools
Note that under &amp;ldquo;Most recent execution&amp;rdquo; nothing is shown. This is because we haven&amp;rsquo;t yet provided a change for our code pipeline to process.
Click on the name of your pipeline to see the stages.
Again, note that the first stage has Failed, but don&amp;rsquo;t worry it is only because the code pipeline tried to run when it is first provisioned but there was no file for it to process.</description></item><item><title>Learn More</title><link>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/7-learn-more/</link><pubDate>Fri, 07 Aug 2020 09:40:35 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/conformance-packs/7-learn-more/</guid><description>Learn more about AWS Config conformance packs
Conformance Pack Launch Announcement Conformance Pack Developer Guide Conformance Pack Sample Templates Managing Conformance Packs Across all Accounts in Your Organization</description></item><item><title>Deploy First Change</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/7-depoly-first-chenge/</link><pubDate>Tue, 04 Aug 2020 09:17:12 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/7-depoly-first-chenge/</guid><description>1. Unzip the change file
In Step 1 - Get Source Files we downloaded the source files. Go to the directory which contains these files and unzip the codepipe-single-sg.zip file, it contains three files;
single_security_group_one_cidr_ingress.json
This file is the main CloudFormation script for our change containing the configuration for the security group that we will deploy first into the Testing Environment, then into the Production Environment. test-stack-configuration.json
This file includes the name of the VPC used for our testing environment.</description></item><item><title>Edit Change &amp; Redeploy</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/8-edit-change/</link><pubDate>Tue, 04 Aug 2020 14:56:11 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/8-edit-change/</guid><description>In this step we will secure the CloudFormation template for our Security Group and redeploy it.
1. Edit the Security group
Go back to your working directory and edit the single_security_group_one_cidr_ingress.json file to a more restrictive ip range - 72.21.196.67/32
{ &amp;#34;AWSTemplateFormatVersion&amp;#34;: &amp;#34;2010-09-09&amp;#34;, &amp;#34;Description&amp;#34;: &amp;#34;Sample, test only template that creates a sample Security Group allowing all SSH traffic inbound from 0.0.0.0/0 . This template is for testing purposes only.&amp;#34;, &amp;#34;Parameters&amp;#34;: { &amp;#34;VPCName&amp;#34;: { &amp;#34;Description&amp;#34;: &amp;#34;ID of the existing VPC.</description></item><item><title>Review Security Group</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/9-review-sg/</link><pubDate>Tue, 04 Aug 2020 15:47:45 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/9-review-sg/</guid><description>On the console go to VPC which you&amp;rsquo;ll find in the Networking &amp;amp; Content Delivery section.
Click on VPCs
About halfway down the list on the left-hand side of the page you will see Security Groups - select it.
Select the checkbox beside Risk Lab Sec Group. Click on the Inbound rules to see that the rule is as we specified.</description></item><item><title>Clean Up</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/10-clean-up/</link><pubDate>Tue, 04 Aug 2020 15:48:01 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/10-clean-up/</guid><description>1. Delete S3 artifactstorebucket
When we ran the CloudFormation template to create the CodePipeline, one of the resources created was an S3 bucket the CodePipeline uses to store it&amp;rsquo;s working files. We need to empty this bucket in order for the CloudFormation deletion to complete.
Select the checkbox beside the bucket that&amp;rsquo;s name starts with pipeline-controls-lab-stack-artifactstorebucket- and click Empty
You can only delete empty S3 buckets. Deletion fails for buckets that have contents.</description></item><item><title>Preventative controls with Code Pipeline</title><link>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/</link><pubDate>Sat, 01 Aug 2020 15:28:32 +1000</pubDate><guid>http://paulJRCurtis.github.io/risk-lab-site/pipeline-controls-intro/</guid><description>A powerful way to implement preventative controls is to embed them into code pipelines.
In this lab we demonstrate a code pipeline which takes an AWS CloudFormation template and runs checks against it, if it passes the template is then deployed into a testing environment where additional checks are run, and finally if the template meets requirements it can be deployed into the production environment.
Contents Get Source Files Create Repo Bucket Create Environments Create a Pipeline Check CloudFormation Review Code Pipeline Deploy First Change Edit Change &amp;amp; Redeploy Review Security Group Clean Up</description></item></channel></rss>